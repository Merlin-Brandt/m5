// vertexshader.glsl:
// in vec2 xy;
// in vec2 uv;

// calling gl.vertexAttribPointer is too cumbersome, it couldn't be more redundant, its too simple to forget one parameter and break everything.
// even these gl.h.vertexAttribute helper functions require you to enter the stride and offset manually, which is redundant.

let sizeof_float = 4;
let the_vao = ...;
let the_vbo = ...;

gl.h.vertexAttribute(the_vao, { 
    attrib_name: "pos", 
    component_count: 2, 
    component_type: gl.FLOAT,
    stride: (2 + 2) * sizeof_float, 
    offset: 0,
    source_buffer: the_vbo
});

gl.h.vertexAttribute(the_vao, { 
    attrib_name: "uv", 
    component_count: 2, 
    component_type: gl.FLOAT,
    stride: (2 + 2) * sizeof_float, 
    offset: 2 * sizeof_float,
    source_buffer: the_vbo
});

// so quickly write up some macros...

/*
    %: {::m5_load(_impl/init.m5)}

    %: feature_vertex_layout {
        !!:vao:alnum_s.vertex_layout = {:result:vertex_layout_buffer_blocks(:vao)::nwh};
    } -> {
        :result
    }

    %: no_tail_opt {}
    %: vertex_layout_buffer_blocks(:r:rest) {}
    %: vertex_layout_buffer_blocks(:r:rest) {::nwh::vertex_layout_buffer_block(:r)::vertex_layout_buffer_blocks(:r)::no_tail_opt}

    %: vertex_layout_buffer_block(:vao:alnum_s) {
        buffer :buffer_name:alnum_s {
            :inputs:vertex_layout_inputs
        }
    } -> {
        ::vertex_attrib_calls(
            vao = :vao,
            vbo = :buffer_name,
            offset = 0, 
            stride = ::vertex_layout_inputs_stride(:inputs),
            inputs = :inputs
        )
    }

    %: vertex_layout_inputs {}
    %: vertex_layout_inputs {::nwh'vec`::09 ::alnum_s::nwh';`::vertex_layout_inputs}

    %: vertex_attrib_calls(
        vao = ::alnum_s,
        vbo = ::alnum_s,
        offset = ::uint,
        stride = ::uint,
        inputs = ::nwh
    ) {}

    %: vertex_attrib_calls(
        vao = :vao:alnum_s,
        vbo = :vbo:alnum_s,
        offset = :offset:uint,
        stride = :stride:uint,
        inputs = vec:component_count:09 :input_name:alnum_s::nwh';`::nwh:other_inputs:vertex_layout_inputs
    ) {} -> {
        gl.h.vertexAttribute(:vao, {
            attrib_name: ":input_name",
            component_count: :component_count,
            component_type: gl.FLOAT,
            stride: :stride,
            offset: :offset,
            source_buffer: :vbo
        });
        ::vertex_attrib_calls(
            vao = :vao,
            vbo = :vbo,
            offset = ::m5cl(:offset + (:component_count * 4)),
            stride = :stride,
            inputs = :other_inputs
        )
    }

    %: vertex_layout_inputs_stride() {} -> {0}
    %: vertex_layout_inputs_stride(vec:n:09 ::alnum_s::nwh';`::nwh:rest:vertex_layout_inputs) {} -> {
        ::m5cl(:n * 4 + ::vertex_layout_inputs_stride(:rest))
    }

    %: use! feature_vertex_layout
*/

// for the rest of this source file, the syntax defined above is available
// the below code will expand to the corresponding gl.vertexAttribute calls.
// as such it is simple to introduce high-level syntax to any language,
// with zero runtime overhead.

!!the_vao.vertex_layout = {
    buffer the_vbo {
        vec2 pos;
        vec2 uv;
    }
}; 