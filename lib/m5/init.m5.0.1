%: init_m5 {}
%: init_m5_0_1 {}
%: init_m5_0_1_1 {}
%: (suppress_error) 1wh {' `}
%: (suppress_error) 1wh {::newline}
%: (suppress_error) 1wh {'	`}
%: (suppress_error) newline {'
`}
%: (suppress_error) newline {'
`}
%: get_newline -> {'
`}
%: {::m5_load(init/predefined.m5)}
%: print (print) {}
%: groups_m5 {}
%: (suppress_error) 0wh {}
%: nwhTO {}
%: nwhTO {::1wh::nwhTO}
%: (suppress_error) nwh {::nwhTO}
%: (suppress_error) 1nwh {::1wh::nwh}
%: (suppress_error) whitespace {::1wh}
%: (suppress_error) whitespaces {::1nwh}
%: simple_quote {«'»}
%: double_quote {"}
%: az {a} %: (suppress_error) az {b} %: (suppress_error) az {c} %: (suppress_error) az {d} %: (suppress_error) az {e} %: (suppress_error) az {f} %: (suppress_error) az {g} %: (suppress_error) az {h} %: (suppress_error) az {i} %: (suppress_error) az {j} %: (suppress_error) az {k} %: (suppress_error) az {l} %: (suppress_error) az {m} %: (suppress_error) az {n} %: (suppress_error) az {o} %: (suppress_error) az {p} %: (suppress_error) az {q} %: (suppress_error) az {r} %: (suppress_error) az {s} %: (suppress_error) az {t} %: (suppress_error) az {u} %: (suppress_error) az {v} %: (suppress_error) az {w} %: (suppress_error) az {x} %: (suppress_error) az {y} %: (suppress_error) az {z}
%: AZ {A} %: (suppress_error) AZ {B} %: (suppress_error) AZ {C} %: (suppress_error) AZ {D} %: (suppress_error) AZ {E} %: (suppress_error) AZ {F} %: (suppress_error) AZ {G} %: (suppress_error) AZ {H} %: (suppress_error) AZ {I} %: (suppress_error) AZ {J} %: (suppress_error) AZ {K} %: (suppress_error) AZ {L} %: (suppress_error) AZ {M} %: (suppress_error) AZ {N} %: (suppress_error) AZ {O} %: (suppress_error) AZ {P} %: (suppress_error) AZ {Q} %: (suppress_error) AZ {R} %: (suppress_error) AZ {S} %: (suppress_error) AZ {T} %: (suppress_error) AZ {U} %: (suppress_error) AZ {V} %: (suppress_error) AZ {W} %: (suppress_error) AZ {X} %: (suppress_error) AZ {Y} %: (suppress_error) AZ {Z}
%: aZ (suppress_error) {::az}
%: aZ {::AZ}
%: 09 {0} %: (suppress_error) 09 {1} %: (suppress_error) 09 {2} %: (suppress_error) 09 {3} %: (suppress_error) 09 {4} %: (suppress_error) 09 {5} %: (suppress_error) 09 {6} %: (suppress_error) 09 {7} %: (suppress_error) 09 {8} %: (suppress_error) 09 {9}
%: specialchar {'!`}%: specialchar {'"`}%: specialchar {'#`}%: specialchar {'$`}%: specialchar {'%`}%: specialchar {'&`}%: specialchar {«'»}%: specialchar {'(`}%: specialchar {')`}%: specialchar {'*`}%: specialchar {'+`}%: specialchar {',`}%: specialchar {'-`}%: specialchar {'.`}%: specialchar {'/`}%: specialchar {':`}%: specialchar {';`}%: specialchar {'<`}%: specialchar {'=`}%: specialchar {'>`}%: specialchar {'?`}%: specialchar {'@`}%: specialchar {'[`}%: specialchar {'\`}%: specialchar {']`}%: specialchar {'^`}%: specialchar {'_`}%: specialchar {{'``}}%: specialchar {'`}%: specialchar {'|`}%: specialchar {'~`}
%: (suppress_error) alnum {::aZ}
%: (suppress_error) alnum {::09}
%: (suppress_error) alnum_ {_}
%: (suppress_error) alnum_ {::alnum}
%: opaquechar {::not_whitespace::anychar}
%: not_whitespace (not) {::whitespace}

%: m5_quote (predefined) {::throw_predefined_rule}
%: anychar (any) {}
%: (not) nochar {::anychar}

%: {::m5_load(lean_comment.m5)}

%: {::remove_comments} {
%: char {::anychar}
%: m_char {::char}

%: uint {::09}
%: uint {::09::uint}

%: int {::uint}
%: int {+::nwh::uint}
%: int {-::nwh::uint}

%: float {-.::uint}
%: float {+.::uint}
%: float {.::uint}
%: float {::int}
%: float {::int.::uint}

%: number {::float}

%: alnum_sTO {::alnum_}
%: alnum_sTO {::alnum_::alnum_sTO}
%: (suppress_error) alnum_s {::alnum_sTO}

%: no_tail_opt {}

%: c_quote {"::c_quote_inner"}
%: c_quote_inner {}
%: c_quote_inner {::not_c_quote_end::anychar::c_quote_inner}
%: c_quote_inner {\:c:anychar:r:c_quote_inner}

%: c_quote_value {":inner:c_quote_inner_value"} -> {:inner}
%: c_quote_inner_value {}
%: c_quote_inner_value {::not_c_quote_end::anychar::c_quote_inner}
%: c_quote_inner_value {\:c:anychar:r:c_quote_inner::no_tail_opt} -> {:c'`:r}

%: not_c_quote_end (not) {"}

%: c_ident {::alnum_s}

%: rest {}
%: rest {::anychar::rest}
%: quit -> {%:'{::rest}`->{}}
%: quit('print rest`) -> {%:'{::rest}`}

%: raise_quote(:r:rest) -> {«'»:r«`»}
%: raise_quote2(:r:rest) -> {::raise_quote(::raise_quote(:r))}
%: raise_braced_quote(:r:rest) -> {'{`«'»:r«`»'}`}

%: {::m5_load(init//whitespace_handler.m5)}

%: until_space {}
%: until_space {::not_whitespace::anychar::until_space}

%: m5_main {
   %: :name:alnum_s = maybe :r:m5_header({})
} -> {
   %: :name {}
   %: :name :r
}

%: m5_main {
   %: :name:alnum_s = until :h:m5_header({})
} -> {
   %: :name (undefine) {}
   %: :name'_not` (undefine) {}
   %: :name {}
   %: :name {«::»:name'_not`'::anychar::`:name}  
   %: :name'_not` (not) :h
}

%: m5_main {
   %: :name:alnum_s = up to :h:m5_header({})
} -> {
   %: :name (undefine) {}
   %: :name'_not` (undefine) {}
   %: :name {:r}
   %: :name {«::»:name'_not`'::anychar::`:name}  
   %: :name'_not` (not) :h
}

%: line_rest = until {::newline}

/ a wcomma is a string of the form \s*\,\s+ 
  and is not a usual comma.
  e.g. with this distinction the two punctuations have two different meanings:
  crab,goyle, have eaten. /
%: until_wcomma {::wcomma}
%: until_wcomma {::not_wcomma::anychar::until_wcomma}
%: not_wcomma (not) {::wcomma}
%: wcomma {::nwh,::1nwh}

%: balanced_curly {{::balanced_curly_inner}}
%: balanced_curly_inner {}
%: balanced_curly_inner {'{`::balanced_curly_inner'}`::balanced_curly_inner}
%: balanced_curly_inner {::not_brace::anychar::balanced_curly_inner}
%: not_brace {::not_brace_begin::not_brace_end}
%: not_brace_begin (not) {«{»}
%: not_brace_end (not) {«}»}

%: copy(:x:rest) {} -> {:x}

%: assert_empty() {}
%: (not) eof {::anychar}

%: throw (print) {::this_rule_promises_not_to_exist}
%: unimplemented {::throw}

%: print(:r:rest) {} -> {
   %: (print) {:r}
}

%: m5_lib {//usr//local//lib//m5//}

%: activate_rule(:feature:alnum_s) {} -> {
   ::_activate_rule_with_flag(:feature, (syntax))
}
%: activate_shallow_rule(:feature:alnum_s) {} -> {
   ::_activate_rule_with_flag(:feature, )
}

%: _activate_rule_with_flag(:feature_ident:alnum_s,:flag:rest) {} -> {
    %: init_use_feature_:feature_ident {}
    %: init_use_feature_:feature_ident {«::»:feature_ident'::init_use_feature_`:feature_ident}
    %: init_use_feature_:feature_ident {«::init_not_»:feature_ident'::anychar::init_use_feature_`:feature_ident}
    %: init_not_:feature_ident (not) {«::»:feature_ident}
    %: :flag {«::init_use_feature_»:feature_ident}
}

%: m5_main {
   %: use! :rulename:alnum_s
} -> {
   %: '{::activate_rule(`:rulename')}`
}

%: assert('t`) {}
%: assert_not('f`) {}

%: init_feature_redefine {
   %: (redefine) :rule_name:alnum_s
} -> {::throw_deprecated}

%: init_feature_redefine {
   '%::`::nwh:rule_name:alnum_s
} -> {
   %: '{::assert_not(::m5_rule_exists(`:rule_name'))}`
   %: :rule_name
}

%: use! init_feature_redefine

%: m5_main {
   %: :rule:alnum_s = :header:m5_header({})
} -> {
   %: (undefine) :rule {}
   %: :rule -> :header
}

%: m5_main {
   %: :rule:alnum_s = peek :inner:m5_header({})
} -> {
   %: (not) :rule'_not` :inner
   %: (not) :rule {'::`:rule'_not`}
}

%: peek_alnum_s = peek {::alnum_s}

%: {::define_late_whitespace_handler_methods}}/remove_comments/