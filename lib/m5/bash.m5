
%: {::init_m5_0_2}
%: {::metatime_m5}
%: {::lean_comments_m5} %: {::remove_comments} {

%::peek_balanced_curly (not) {::not_balanced_curly}
%::not_balanced_curly (not) {::balanced_curly}

/bash functions basically take string arrays as parameters. so make a simple syntax to translate such a cpp function to bash :)/


%::explicit_c_int_expr {argc} -> {$#}
%: explicit_c_int_expr {( int ) :varname:alnum_s} -> {$varname}
%: explicit_c_int_expr {::int}

%::explicit_c_str_expr {:r:explicit_c_str_expr_inner} -> {":r"}
%::c_str_expr {:r:c_str_expr_inner} -> {":r"}
%::c_str_destptr {:r:c_str_destptr_inner} -> {":r"}
/{/
    /strdupcat(dest, src) ≡ strcat(strdup(dest), src)/
	%::explicit_c_str_expr_inner {
		strdupcat(:dest:c_str_expr_inner, :src:c_str_expr_inner)
	} -> {
		:dest'`:src
	}

	%: explicit_c_str_expr_inner {argv[:var:alnum_s]} -> {${!:var}}
	%: explicit_c_str_expr_inner {argv[:i:uint]} -> {$:i}
	%: explicit_c_str_expr_inner {«`»:cmd:inline_cmd«`»} -> {$(:cmd)}
	%: explicit_c_str_expr_inner {( char * ) :varname:alnums} -> {$:varname}
	%: explicit_c_str_expr_inner {":r:c_quote_inner"} -> {:r}

	%::c_str_destptr_inner {:varname:alnum_s}

	%::c_str_expr_inner {:varname:c_str_destptr_inner} -> {$:varname}
	%: c_str_expr_inner {::explicit_c_str_expr_inner} 
/}/

%::fopen_expr {fopen(:filename:c_str_expr, ::c_str_expr)} -> {:filename}

%::c_file_expr {::fopen_expr}
%: c_file_expr {:varname:alnum_s}
%: c_file_expr {::explicit_c_file_expr}

%::c_expr {::explicit_c_int_expr}
%: c_expr {::c_str_expr}
%: c_expr {::c_file_expr}

%: inline_cmd = until {«`»}

%::c_stmts(:locals:alnum_s) {}
%: c_stmts(:locals:alnum_s) {'` ::c_stmt(:locals) ::c_stmts(:locals) '`}

%::delete(:r:rest) {:r} -> {}
%: [meta] type varargs = list of {::c_expr} separated by {::delete(,)}.
%: maybe_varargs {}
%: maybe_varargs {::delete(,) ::varargs}

%: c_stmt(:locals:alnum_s) {
	fprintf ( :f:c_file_expr , :fmt:c_str_expr :a:maybe_varargs ) ;
} -> {
	printf :fmt :a > :f
}

%: c_stmt(:locals:alnum_s) {
	printf ( :fmt:c_str_expr :a:maybe_varargs ) ;
} -> {
	printf :fmt :a
}

%: c_stmt(:locals:alnum_s) {
    FILE * :file:alnum_s = :val:c_file_expr ;
} -> {
	:file=:val
}

%: c_stmt(:locals:alnum_s) {
    fclose ( :file:alnum_s ) ;
} -> {
	:file=""
}

%: c_stmt(:locals:alnum_s) {
	FILE * :file:alnum_s = :val:fopen_expr {
		:rest:c_stmts(:locals'`2)
	}
} -> {
	:file=val
	:rest
	:file=
} /-> (++c syntax)/ /{
	FILE *:file = :val;
	{
		:rest
	}
	fclose(:file);
}/

%: c_stmt(:locals:alnum_s) {
	char * :var:alnum_s = malloc ( ) ;
} -> {
	:var=$(mktemp /tmp/XXXXXXXX.shvar)
}

%: c_stmt(:locals:alnum_s) {
	free ( :var:alnum_s ) ;
} -> {
	rm "$var"
}

%: c_stmt(:locals:alnum_s) {
	if ( ! strcmp ( :a:c_str_expr , :b:c_str_expr ) ) {:body:c_stmts(:locals'`2)}
} -> {
	test :a = :b && {:body}
}

%: c_stmt(:locals:alnum_s) {
	if (:a:explicit_c_int_expr == :b:explicit_c_int_expr) {:body:c_stmts(:locals'`2)}
} -> {
	test :a -eq :b && {:body}
}

%: c_stmt(:locals:alnum_s) {
	char * :var:alnum_s = :val:c_str_expr;
} -> {
	:var=:val
}

%: c_stmt(:locals:alnum_s) {
	int :var:alnum_s = :val:explicit_c_int_expr;
} -> {
	:var=:val
} 

%: c_stmt(:locals:alnum_s) {
	«`»:cmd:inline_cmd«`»;
} -> {
	:cmd 
}

%: nop {}
%::str_expr {::c_quote}
%: str_expr {:v:alnum_s} -> {"$:v"}
%: [meta] type str_expr_list = list of {::str_expr} separated by {::delete(,)} .

%: c_stmt(:locals:alnum_s) {
	for ( char * :var:alnum_s : {:list:str_expr_list} ) {:body:c_stmts(:locals'`2)}
} -> {
	for :var in :list '
`   do '
`       :body '
`   done'
`}

%::step_op(:var:alnum_s) {++ :var} -> {1}
%: step_op(:var:alnum_s) {:var ++} -> {1}
%: step_op(:var:alnum_s) {-- :var} -> {-1}
%: step_op(:var:alnum_s) {:var --} -> {-1}
%: step_op(:var:alnum_s) {:var += :s:int} -> {:s}
%: step_op(:var:alnum_s) {:var -= :s:int} -> {::m5cl(-:s)}
%: cmp_op {>=}
%: cmp_op {<=}
%: c_stmt(:locals:alnum_s) {
	for ( int :var:alnum_s = :a:explicit_c_int_expr ; :var ::cmp_op :z:explicit_c_int_expr ; :step:step_op(:var) ) {:body:c_stmts(:locals'`2)}
} -> {
	for :var in $(seq :a :step :z)'
`   do '
`       :body '
`   done'
`}

%: c_stmts_locals {}

%: transpile_bashy_c {
    '` #include <string.h> '`
    '` int main ( int argc , char * * argv ) '{` :contents:c_stmts(c_stmts_locals) '}`
} -> {
	:contents
}

%: transpile_bashy_c {::c_stmts(c_stmts_locals)}

%: {::transpile_basy_c}

}/remove_comments/