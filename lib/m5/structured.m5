%: {::init_m5_0_2}
%::structured_m5 {}


%: {::remove_comments} {

/for all uses of nameless_rule below, flags arent really supported. so maybe replace them with a checked ::unflagged_nameless_rule version./

/%::flag {(::alnum_s)}    /
/%::flags {}              /
/%: flags {::flag ::flags}/
%: (undefine) flags {}
%: flags {}

 %::header_or_param_header {::m5_header({})}
/%: header_or_param_header {::m5_header(())}/
%::nameless_rule {::header_or_param_header}
%: nameless_rule {::header_or_param_header -> ::m5_body({}) ::maybe_catch_body}

%::maybe_catch_body {}
%: maybe_catch_body {(catch unknown rule) ::m5_body({})}

%::rule_combination {::seq_chain_combination} /1<=simple/
%: rule_combination {::or_chain_combination} /2<=seq/

    %::seq_chain_combination {::rule_combination_simple}
    %: seq_chain_combination {::rule_combination_simple ::seq_chain_combination::no_tail_opt}

    %::or_chain_combination {::seq_chain_combination or ::seq_chain_combination}
    %: or_chain_combination {::seq_chain_combination or ::or_chain_combination::no_tail_opt}

    %::rule_combination_simple {::rule_prefix_op::nameless_rule::rule_postfix_op}
    %: rule_combination_simple {::rule_prefix_op'`( ::rule_combination )::rule_postfix_op}

    %::rule_postfix_op {}
    %: rule_postfix_op {*}
    %: rule_postfix_op {+}
    %: rule_postfix_op {?}
    %::rule_prefix_op {}
    %: rule_prefix_op {!}
    %: rule_prefix_op {match all of '`}

/unfold/ /{/
    %: unfold {
        -combination(:pre:rule_prefix_op/ /:header:header_or_param_header/ /:post:rule_postfix_op) 
        -on(:prefix:c_ident) 
        -def(:def:def_directive) .
    } -> {
        %: «{::unfold}» -combination(:pre(:header):post) -on(:prefix) -def(:def).
    }

    %: unfold {
        -combination(:r:nameless_rule) '`
        -on(:prefix:c_ident) '`
        -def(:def:def_directive) .
    } -> {
        :def :prefix :r
    }

    %: unfold {-combination(( :r:rule_combination )) -on(:prefix:c_ident) -def(:def:def_directive) .} -> {
        %: «{::unfold}» -combination(:r) -on(:prefix) -def(:def).
    }

    / the + syntax could be optimized from  /
    /   %: rule {::inner}                   /
    /   %: rule {::inner::rule}             /
    / to                                    /
    /   %: rule {::inner::maybe_rule}       /
    /   %: maybe_rule {::inner::maybe_rule} /
    /   %: maybe_rule {}                    /

    %: unfold {-combination(( :r:rule_combination )+) -on(:prefix:c_ident) -def(:def:def_directive) .} -> {
        :def :prefix {«::»:prefix«»_1n}
        :def :prefix {«::»:prefix«»_1n/ /«::»:prefix}
        %: {«::unfold»} -combination(:r) -on(:prefix«»_1n) -def(:def).
    }    

    %: unfold {-combination(( :r:rule_combination )*) -on(:prefix:c_ident) -def(:def:def_directive) .} -> {
        :def :prefix {}
        :def :prefix {«::»:prefix«»_n/ /«::»:prefix}
        %: {«::unfold»} -combination(:r) -on(:prefix«»_n) -def(:def).
    }

    %: unfold {-combination(match all of ( :r:rule_combination )) -on(:prefix:c_ident) -def(:def:def_directive) .} -> {
        :def :prefix {«::»:prefix«»_ma«/ /:rst:rest::assert_empty(:rst)»}
        %: {«::unfold»} -combination(:r) -on(:prefix«»_ma) -def(:def).
    }

    %: unfold {-combination(( :r:rule_combination )?) -on(:prefix:c_ident) -def(:def:def_directive) .} -> {
        :def :prefix {}
        :def :prefix {«::»:prefix«»_maybe}
        %: {«::unfold»} -combination(:r) -on(:prefix«»_maybe) -def(:def).
    }

    %: unfold {-combination(!( :r:rule_combination )) -on(:prefix:c_ident) -def(:def:def_directive) .} -> {
        :def (not) :prefix {«::»:prefix«»_not}
        %: {«::unfold»} -combination(:r) -on(:prefix«»_not) -def(:def).
    }

    %: unfold_arg_postfix {'` '`} -> {_t}
    %: unfold_arg_postfix {-postfix(:p:c_ident) '`} -> {:p}

    / an example sequence chain {first}({second})+ will be unfolded on "prefix" as follows:
      first unfold the subrules:
        %: prefix_s {first}
        %: prefix_ss {second}
        %: prefix_ss {second::prefix_ss}
      then unfold the stem rule:
        %: prefix {::prefix_s::prefix_ss} /

    %: unfold {
        -combination(:head:rule_combination_simple :rest:seq_chain_combination) '`
        -on(:prefix:c_ident) -def(:def:def_directive) .
    } -> {
        %: {«::unfold_seq_subrules»} -combination(:head :rest) -on(:prefix«»_s) -def(:def).
        %: {«::unfold_seq_stemrule»} -combination(:head :rest) -on(:prefix) -def(:def).
    }

    %: unfold_seq_steminvocs (
        -combination(:head:rule_combination_simple) '`
        -on(:prefix:c_ident)
    ) -> {
        «::»:prefix
    }

    %: unfold_seq_steminvocs (
        -combination(:head:rule_combination_simple :rest:seq_chain_combination) '`
        -on(:prefix:c_ident)
    ) {
        :other_invocs:unfold_seq_steminvocs(-combination(:rest) -on(:prefix«»s))::no_tail_opt
    } -> {
        «::»:prefix :other_invocs
    }

    %: unfold_seq_stemrule {
        -combination(:head:rule_combination_simple :rest:seq_chain_combination) '`
        -on(:prefix:c_ident) -def(:def:def_directive) .
        :invocs:unfold_seq_steminvocs(-combination(:head :rest) -on(:prefix«»_s))
    } -> {
        :def :prefix {:invocs}
    }

    %: unfold_seq_subrules {
        -combination(:head:rule_combination_simple) '`
        -on(:prefix:c_ident) -def(:def:def_directive) .
    } -> {
        %: {«::unfold»} -combination(:head) -on(:prefix) -def(:def).
    }

    %: unfold_seq_subrules {
        -combination(:head:rule_combination_simple :rest:seq_chain_combination) '`
        -on(:prefix:c_ident) -def(:def:def_directive) .
    } -> {
        %: {«::unfold»} -combination(:head) -on(:prefix) -def(:def).
        %: {«::unfold_seq_subrules»} -combination(:rest) -on(:prefix«»s) -def(:def).
    }

    %: unfold {
        -combination(:head:seq_chain_combination or :tail:seq_chain_combination) '`
        -on(:prefix:c_ident) '`
        :postfix:unfold_arg_postfix '`
        -def(:def:def_directive) .
    } -> {
        %: «{::unfold}» -combination(:tail) -on(:prefix«»:postfix«»t) -def(:def).
        %: «{::unfold}» -combination(:head) -on(:prefix«»:postfix) -def(:def).
        :def :prefix {«::»:prefix«»:postfix«»t}
        :def :prefix {«::»:prefix«»:postfix}
    }

    %: unfold {
        -combination(:head:seq_chain_combination or :rest:or_chain_combination) '`
        -on(:prefix:c_ident) '`
        :postfix:unfold_arg_postfix '`
        -def(:def:def_directive).
    } -> {
        %: «{::unfold}» -combination(:rest) -on(:prefix) -postfix(:postfix«»t) -def(:def).
        %: «{::unfold}» -combination(:head) -on(:prefix«»:postfix) -def(:def).
        :def :prefix {«::»:prefix«»:postfix}
    }
/}/

%::maybe_rule_header {}
%: maybe_rule_header {::m5_header(())}

%::maybe_v {}
%: maybe_v {verbose } -> {(print)}

%::def_directive_in {} -> {'%:`}
%: def_directive_in {compile' `} -> {%%: -> {'':``}}

%::def_directive {'%:`}
%: def_directive {%%: -> {'':``}}

%: structured_rule(:vf:maybe_v:def:def_directive_in:ruleName:c_ident = :root:rule_combination) -> {
    %: '{::unfold}`
        -combination(:root)
        -on(:ruleName'`_v)
        -def(:def).
    :def :vf :ruleName {«::»:ruleName'`_v}
}

%: structured_rule(:def:def_directive_in:ruleName:c_ident = param :root:rule_combination) -> {
    %: '{::unfold}` 
        -combination(:root)
        -on(:ruleName'_p`)
        -def(:def).
    :def :ruleName (':r:`:ruleName'_p`) -> {«:r»}
}

}/remove_comments/