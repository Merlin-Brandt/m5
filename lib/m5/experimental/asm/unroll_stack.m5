%: no_opt {}

%: stack_instr {push}
%: stack_instr {pop}
%: stack_instr_sign('push`) -> {+}
%: stack_instr_sign('pop`) -> {-}
%: stack_instr_esp_mod('push`) -> {sub esp}
%: stack_instr_esp_mod('pop`) -> {add esp}

%: unroll_stack_(::rest) {} -> {}
%: unroll_stack_(:offset:uint) {:address:hex_uint': ` :instr:instr    :c:asm_comment ::newline :r:rest} -> {
    :address': ` :instr :c
    %: '{::unroll_stack_(`:offset')}`
    :r
}
%: unroll_stack_(:offset:uint) {
    :address:hex_uint': ` pop' ` :e:expr :c:asm_comment ::newline
    :r:rest
    :e_n:expr_size(:e)
    :PTR:ptr_from_size(:e_n)
} -> {
    :address': ` mov :e, :PTR [base + :offset] :c
    :address': ` add esp, 0x:e_n
    %: '{::unroll_stack_(`::m5cl(:offset - :e_n)')}`
    :r
}

%: unroll_stack_(:offset:uint) {
    :address:hex_uint': ` push' ` :e:expr :c:asm_comment ::newline
    :r:rest
    :e_n:expr_size(:e)
    :PTR:ptr_from_size(:e_n)
} -> {
    :address': ` sub esp, 0x:e_n
    :address': ` mov :PTR [base - :offset], :e :c

    %: '{::unroll_stack_(`::m5cl(:offset + :e_n)')}`       
    :r
}

%: unroll_stack {:r:rest} -> {
    '00000000: ` mov base, esp
    %: '{::unroll_stack_(0)}`
    :r    
}
